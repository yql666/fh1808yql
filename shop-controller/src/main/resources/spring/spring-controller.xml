<?xml version="1.0" encoding="GBK"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/mvc
    	http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd">
        <bean id="multipartResolver"
              class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
            <!-- set the max upload size100MB -->
            <property name="maxUploadSize">
                <value>104857600</value>
            </property>
        </bean>
    <!-- 对项目中的所有类进行扫描以完成Bean创建并进行自动注入。
           支持 @Controller、@Service 以及 @Repository 和 @Component -->
    <!-- 扫描项目中com.fh.shop.controller包下所有的类，从而使类中的@Controller注解生效 -->
    <context:component-scan base-package="com.fh.shop.backend.controller"/>
    <!--
        jsp视图解析器，对模型视图名称的解析，即在模型视图名称添加前后缀
        如/view/welcome.jsp对应的视图名就是：welcome
        这个类在视图解析器链中一定要定义在其他视图的后面，因为它始终会返回一个视图
    -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/view/"/>
        <property name="suffix" value=".jsp"/>
    </bean>
    <mvc:annotation-driven/>
    <!--创建一个切面类实例化bean-->
    <bean id="logAspect" class="com.fh.shop.backend.aspect.LogAspect"></bean>
    <!--开启切点-->
    <aop:config>
        <!-- aspect 爱思派克特 -->
        <aop:aspect  ref="logAspect" >
            <!--指明要横切的类 中指定的方法-->
            <aop:pointcut expression="execution(* com.fh.shop.backend.controller..*.add*(..))||execution(* com.fh.shop.backend.controller..*.del*(..))||execution(* com.fh.shop.backend.controller..*.update*(..))||execution(* com.fh.shop.backend.controller..*.findUser(..))" id="logPointCut"/>
            <!--aop:around  环绕通知  method="doLog"对应的方法-->
            <aop:around method="doLog"  pointcut-ref="logPointCut"/>
        </aop:aspect>
    </aop:config>
    <mvc:interceptors>
        <!--  多个拦截器，顺序执行 -->
        <mvc:interceptor>
            <!-- /**表示所有url包括子url路径 -->
            <mvc:mapping path="/**"/><!-- 拦截所有springMVC下所有url  -->
            <!-- 不拦截登录的请求 -->
            <mvc:exclude-mapping path="/user/findUser.jhtml"/>
            <mvc:exclude-mapping path="/user/addUser.jhtml"/>
            <mvc:exclude-mapping path="/user/findUserName.jhtml"/>
            <mvc:exclude-mapping path="/api/product/findProductApi.jhtml"/>
            <mvc:exclude-mapping path="/brand/api/brandList.jhtml"/>
            <mvc:exclude-mapping path="/api/area/findAreaApi.jhtml"/>
            <mvc:exclude-mapping path="/member/findMemberList.jhtml"/>
            <bean class="com.fh.shop.backend.interceptor.Interceptor"></bean>
        </mvc:interceptor>
    </mvc:interceptors>
</beans>